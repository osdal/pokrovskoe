<?php

//require_once drupal_get_path('module', 'flatclassifieds_helper') . '/ip2location/ip2location.class.php';
require_once drupal_get_path('module', 'sharethis') . '/sharethis.module';

function flatclassifieds_helper_requirements($phase) {
  $requirements = array();

  $requirements['flatclassifieds_helper'] = array(
    'title' => t('FlatClassifieds'),
    'value' => '2017.02.21',
    //'description' => '',
    'weight' => '-9',
    'severity' => REQUIREMENT_INFO,
  );
  return $requirements;
}

function flatclassifieds_helper_init() {
  if ($path = libraries_get_path('awesome')) {
    drupal_add_css($path . '/css/font-awesome.min.css');
  }
  drupal_add_js(drupal_get_path('module', 'flatclassifieds_helper').'/flatclassifieds_helper.js');
  drupal_add_css(drupal_get_path('module', 'flatclassifieds_helper').'/flatclassifieds_helper.css');
  if (theme_get_setting('tm_value_15')) flatclassifieds_helper_detect_location($_SERVER['REMOTE_ADDR']);
//drupal_set_message(t('init'));
//$a = flatclassifieds_helper_detect_location('178.126.139.204');
//$a = flatclassifieds_helper_detect_location($_SERVER['REMOTE_ADDR']);
//drupal_set_message($a['country'].', '.$a['city'].', '.$a['latitude'].', '.$a['longitude']);
//  if (isset($_GET['latitude']) and $_GET['latitude']) {
//    drupal_set_message('<pre>'. check_plain($_GET['latitude'].' - '.$_GET['longitude']) .'</pre>');
//  }
}


/**
 * Implements hook_menu().
 */

function flatclassifieds_helper_menu() {

  $menu['mobilefileupload'] = array(
    'page callback' => 'flatclassifieds_helper_mobilefileupload',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $menu['node/%node/featured'] = array(
    'title' => 'Featured',
    'page callback' => 'flatclassifieds_helper_node_highlight',
    'page arguments' => array(1, 2),
    'access callback' => 'flatclassifieds_helper_node_highlight_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $menu['node/%node/highlight'] = array(
    'title' => 'Highlight',
    'page callback' => 'flatclassifieds_helper_node_highlight',
    'page arguments' => array(1, 2),
    'access callback' => 'flatclassifieds_helper_node_highlight_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $menu['node/%node/sticky'] = array(
    'title' => 'Sticky',
    'page callback' => 'flatclassifieds_helper_node_highlight',
    'page arguments' => array(1, 2),
    'access callback' => 'flatclassifieds_helper_node_highlight_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $menu['user/%/gomessages'] = array(
    'title'            => 'Messages',
    'page callback'    => 'flatclassifieds_helper_go_privatemsg',
    'access callback'  => 'flatclassifieds_helper_privatemsg_user_access',
    'type'             => MENU_LOCAL_TASK,
  );

  return $menu;
}


function flatclassifieds_helper_privatemsg_user_access($permission = 'read privatemsg', $account = NULL) {
  static $disabled_displayed = FALSE;
  global $user;
  if ( $account === NULL ) {
    $account = $user;
  }
  if (!$account->uid) { // Disallow anonymous access, regardless of permissions
    return FALSE;
  }
  if ($account->uid != arg(1) or user_access('read all private messages', $account)) {
    return FALSE;
  }
  if (privatemsg_is_disabled($account) && ($permission == 'write privatemsg') ) {
    if (arg(0) == 'messages' && variable_get('privatemsg_display_disabled_message', TRUE) && !$disabled_displayed) {
      $disabled_displayed = TRUE;
      drupal_set_message(t('You have disabled Privatemsg and are not allowed to write messages. Go to your <a href="@settings_url">Account settings</a> to enable it again.', array('@settings_url' => url('user/' . $account->uid . '/edit'))), 'warning');
    }
    return FALSE;
  }
  if (!user_access($permission, $account)) {
    return FALSE;
  }
  return TRUE;
}

function flatclassifieds_helper_go_privatemsg() {
  drupal_goto('messages');
}

function flatclassifieds_helper_ctools_render_alter(&$info, &$page, &$context) {
  //drupal_set_message('<pre>'. check_plain(print_r($info, 1)) .'</pre>');
  flatclassifieds_helper_is_ctools_render(TRUE);
  //$info['content'] = '<!--panel-->'.$info['content'];
}

function flatclassifieds_helper_is_ctools_render($i = FALSE) {
  static $is = FALSE;
  if ($i) {
    $is = TRUE;
  }
  return $is;
}


function flatclassifieds_helper_node_highlight_access($node) {
  return ($GLOBALS['user']->uid == $node->uid and ($node->type == 'classified' or $node->type == 'classified_noex'));
}

function flatclassifieds_helper_node_highlight($node, $op) {
  global $user;

  //$node = $form_state['node'];
  if ($op == 'highlight') {
    $product_id = 11;
  } elseif ($op == 'featured') {
    $product_id = 13;
  } else {
    $product_id = 12;
  }
  $product = commerce_product_load($product_id);

  //$form_state['redirect'] = 'checkout';

  // Create our new line item.
  $line_item = commerce_product_line_item_new($product, 1, 0, array(), 'ph_commerce_node');
//drupal_set_message('<pre>'. check_plain(print_r($line_item, 1)) .'</pre>');
  // Set the node_reference field value.
  $line_item->ph_commerce_node[LANGUAGE_NONE][0]['nid'] = $node->nid;

  // Let other modules have a go.
  //drupal_alter('flatclassifieds_helper_node_highlight_line_item', $line_item, $product, $node);

  // Add to cart.
  $line_item = commerce_cart_product_add($user->uid, $line_item, FALSE);

  // Load the order for returning it.
  //$order = commerce_cart_order_load($user->uid);
  //return $order;
  //drupal_goto('cart');
  drupal_goto('node/'.$node->nid);
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function flatclassifieds_helper_commerce_line_item_type_info() {

  $line_item_types['ph_commerce_node'] = array(
    'name' => t('FlatClassifieds Helper'),
    'description' => t('Example Line Item type of line item'),
    'product' => TRUE,
    'add_form_submit_value' => t('Place listing'),
    'base' => 'commerce_product_line_item',
  );
//   $line_item_types['flatclassifieds_helper_commerce_node'] = array();
//   $line_item_types['flatclassifieds_helper_node'] = array();
//   $line_item_types['flatclassifieds_helper'] = array();
//   $line_item_types['comment_node_panel'] = array();
  return $line_item_types;
}

function flatclassifieds_helper_is_highlight($nid, $class = '') {
  $end = db_select('pch_timeline', 't')->fields('t', array('end'))->condition('t.nid', $nid)->condition('t.type', 'highlight')->condition('t.end', time(), '>')->condition('t.status', 1)->execute()->fetchField();
  if ($class) {
    return ($end ? $class : '');
  } else {
    return ($end ? TRUE : FALSE);
  }
}

function flatclassifieds_helper_timeline($nid, $type = 'highlight') {
  $end = db_select('pch_timeline', 't')->fields('t', array('end'))->condition('t.nid', $nid)->condition('t.type', $type)->condition('t.end', time(), '>')->condition('t.status', 1)->orderBy('t.end', 'DESC')->execute()->fetchField();
  return ($end ? format_interval($end - time()) : 0);
}

/**
 * Implements hook_cron().
 */
function flatclassifieds_helper_cron() {
  $nids = array();
  $ends = db_select('pch_timeline', 't')->fields('t', array('nid'))->condition('t.type', 'sticky')->condition('t.end', time(), '<')->condition('t.status', 1)->execute()->fetchCol();
  foreach ($ends as $end) {
    $nids[$end] = $end;
  }
  if (count($nids)) {
    db_update('node')
      ->condition('nid', $nids, 'in')
      ->fields(array(
    	  'sticky' => 0,
  	  ))
      ->execute();
  }
  $nids = array();
  $ends = db_select('pch_timeline', 't')->fields('t', array('nid'))->condition('t.type', 'featured')->condition('t.end', time(), '<')->condition('t.status', 1)->execute()->fetchCol();
  foreach ($ends as $end) {
    $nids[$end] = $end;
  }
  if (count($nids)) {
    db_update('node')
      ->condition('nid', $nids, 'in')
      ->fields(array(
    	  'promote' => 0,
  	  ))
      ->execute();
  }
  db_update('pch_timeline')
    ->condition('end', time(), '<')->condition('status', 1)
    ->fields(array(
    	'status' => 2,
  	))
    ->execute();
  //db_delete('pch_timeline')->condition('end', time(), '<')->execute();
}

/**
 * Implements hook_block_info().
 */
function flatclassifieds_helper_block_info() {
  $blocks = array();
  $blocks[0]['info'] = 'Ads Category';
  // Not worth caching.
  $blocks[0]['cache'] = DRUPAL_NO_CACHE;

  $blocks[1]['info'] = 'Ads Category (Big)';
  // Not worth caching.
  $blocks[1]['cache'] = DRUPAL_NO_CACHE;

  $blocks[2]['info'] = 'Ads Category (Big Title)';
  // Not worth caching.
  $blocks[2]['cache'] = DRUPAL_NO_CACHE;

  $blocks[3]['info'] = 'Profile Information';
  // Not worth caching.
  $blocks[3]['cache'] = DRUPAL_NO_CACHE;

//   $blocks[1]['info'] = 'Ads info';
//   // Not worth caching.
//   $blocks[1]['cache'] = DRUPAL_NO_CACHE;

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function flatclassifieds_helper_block_view($delta = '') {
  $data = array();
  if ($delta == 0) {
    $data['subject'] = t('Categories');
    $data['content'] = flatclassifieds_helper_block_adscategory();
  }
  if ($delta == 1) {
    $data['subject'] = t('Categories (Big)');
    $data['content'] = flatclassifieds_helper_block_adscategorybig();
  }
  if ($delta == 2) {
    $data['subject'] = t('Categories (Big Title)');
    $data['content'] = flatclassifieds_helper_block_adscategorybigtitle();
  }
  if ($delta == 3) {
    $data['subject'] = t('Profile Information');
    $data['content'] = flatclassifieds_helper_block_profileinformation();
  }
//   if ($delta == 1) {
//     $data['subject'] = t('Ads info');
//     $data['content'] = flatclassifieds_helper_block_adsinfo();
//   }
  return $data;
}

function flatclassifieds_helper_block_profileinformation() {//
  global $user;

  if (arg(1)) {
    $acc = user_load(arg(1));
  }
  $types = array('classified', 'classified_noex');
  $data = '<div class="profile_information">';

  $out = 0;
  $query = db_select('node', 'n');
  $query->addTag('node_access');
  $query->condition('n.status', 1, '=');
  $query->condition('n.type', $types, 'IN');
  $query->addExpression('COUNT(n.nid)');
  $count = $query->execute()->fetchCol();
  if (isset($count[0]) and $count[0] and is_numeric($count[0])) {
    $out = $count[0];
    $data .= '<div class="p_item">'.t('Regular Ads <b>!ads</b>', array('!ads' => $out)).'</div>';
  }

  $out = 0;
  $query = db_select('node', 'n');
  $query->addTag('node_access');
  $query->condition('n.status', 1, '=');
  $query->condition('n.promote', 1, '=');
  $query->condition('n.type', $types, 'IN');
  $query->addExpression('COUNT(n.nid)');
  $count = $query->execute()->fetchCol();
  if (isset($count[0]) and $count[0] and is_numeric($count[0])) {
    $out = $count[0];
    $data .= '<div class="p_item">'.t('Featured Ads <b>!ads</b>', array('!ads' => $out)).'</div>';
  }

  $out = 0;
  $query = db_select('node', 'n');
  $query->addTag('node_access');
  $query->condition('n.status', 1, '=');
  $query->condition('n.sticky', 1, '=');
  $query->condition('n.type', $types, 'IN');
  $query->addExpression('COUNT(n.nid)');
  $count = $query->execute()->fetchCol();
  if (isset($count[0]) and $count[0] and is_numeric($count[0])) {
    $out = $count[0];
    $data .= '<div class="p_item">'.t('Sticky Ads <b>!ads</b>', array('!ads' => $out)).'</div>';
  }

  $out = 0;
  $query = db_select('node', 'n');
  $query->join('pch_timeline', 'v', 'n.nid = v.nid');
  $query->addTag('node_access');
  $query->condition('n.status', 1, '=');
  $query->condition('n.type', $types, 'IN');
  $query->condition('v.end', time(), '>');
  $query->condition('v.status', 1);
  $query->addExpression('COUNT(n.nid)');
  $count = $query->execute()->fetchCol();
  if (isset($count[0]) and $count[0] and is_numeric($count[0])) {
    $out = $count[0];
    $data .= '<div class="p_item">'.t('Highlight Ads <b>!ads</b>', array('!ads' => $out)).'</div>';
  }

  if (isset($acc->created) and $acc->created) $data .= '<div class="p_item">'.t('Member since <b>!created</b>', array('!created' => format_date($acc->created, 'date'))).'</div>';
  $data .= '</div>';
  return $data;
}

function flatclassifieds_helper_block_adscategory() {
  $data = $data1 = $data2 = '';
  $agr = $agr1 = $agr2 = $agr3 = 0;
  if (is_numeric(arg(2))) {
    $agr3 = arg(2);
  } else {
    $agr4 = explode('+', arg(2));
    if (count($agr4)) {
      $agr3 = $agr4[0];
      $txx = taxonomy_term_load($agr3);
      if ($txx) drupal_set_title($txx->name);
    }
  }
  if (arg(0) == 'taxonomy' and arg(1) == 'term' and is_numeric($agr3)) {
    $agr2 = $agr3;
    //$tx = taxonomy_term_load($agr);
    $us = db_select('taxonomy_term_hierarchy')->fields('taxonomy_term_hierarchy', array('parent'))->condition('tid', $agr3, '=')->execute();
    foreach ($us as $uss) {
      $agr = $uss->parent;
      $tx = taxonomy_term_load($uss->parent);
    }
  } else {
    $agr = 0;
  }
  $result = taxonomy_get_tree(3, $agr, 1);
  foreach ($result as $term) {
    $data2 = '';
    $result1 = taxonomy_get_tree(3, $term->tid, 1);
    foreach ($result1 as $term1) {
      $data2 .= '<li class="leaf">'.l(flatclassifieds_helper_name_term($term1), 'taxonomy/term/'.$term1->tid, array('html' => true)).'</li>';
    }
    if ($data2) {
      if ($agr2 == $term->tid) {
        $data1 .= '<li class="collcat expandedd">'.l(flatclassifieds_helper_name_term($term), 'taxonomy/term/'.$term->tid, array('html' => true)).'<ul class="menu">'.$data2.'</ul></li>';
      } else {
        $data1 .= '<li class="collcat collapsedd">'.l(flatclassifieds_helper_name_term($term), 'taxonomy/term/'.$term->tid, array('html' => true)).'<ul class="menu">'.$data2.'</ul></li>';
      }
    } else {
      $data1 .= '<li class="leaf">'.l(flatclassifieds_helper_name_term($term), 'taxonomy/term/'.$term->tid, array('html' => true)).'</li>';
    }
  }
  if ($data1) {
    if (isset($tx) and $tx) $data .= '<li class="leafback">'.l(t('<< Come Back'), 'taxonomy/term/'.$tx->tid, array('html' => true)).'</li>';
    $data = '<div class="navcat"><ul class="menu">'.$data.$data1.'</ul></div>';
  }
  return $data;
}

function flatclassifieds_helper_block_adscategorybig() {
  $data = $data1 = $data2 = '';
  $agr = $agr1 = $agr2 = $agr3 = 0;
  if (is_numeric(arg(2))) {
    $agr3 = arg(2);
  } else {
    $agr4 = explode('+', arg(2));
    if (count($agr4)) {
      $agr3 = $agr4[0];
      $txx = taxonomy_term_load($agr3);
      if ($txx) drupal_set_title($txx->name);
    }
  }
  if (arg(0) == 'taxonomy' and arg(1) == 'term' and is_numeric($agr3)) {
    $agr2 = $agr3;
    //$tx = taxonomy_term_load($agr);
    $us = db_select('taxonomy_term_hierarchy')->fields('taxonomy_term_hierarchy', array('parent'))->condition('tid', $agr3, '=')->execute();
    foreach ($us as $uss) {
      $agr = $uss->parent;
      $tx = taxonomy_term_load($uss->parent);
    }
  } else {
    $agr = 0;
  }
  $result = taxonomy_get_tree(3, 0, 1);

  foreach ($result as $term) {
    if (variable_get('taxonomy_show_big_'.$term->tid, TRUE)) {
			$data2 = '';
			$result1 = taxonomy_get_tree(3, $term->tid, 1);
			$i = 0;
			foreach ($result1 as $term1) {
				if (variable_get('taxonomy_show_big_'.$term1->tid, TRUE) and $i < 6) {
				  $data2 .= '<li class="leaf">'.l(flatclassifieds_helper_name_term($term1), 'taxonomy/term/'.$term1->tid, array('html' => true)).'</li>';
				  $i++;
				}
			}
			$data1 .= '<div class="col-md-3 col-sm-4 col-xs-6"><div class="category_home_block category_home_block_'.$term->tid.'"><h3>'.l(flatclassifieds_helper_get_term_icon($term->tid, 'termimgico').flatclassifieds_helper_name_term($term), 'taxonomy/term/'.$term->tid, array('html' => true)).'<div class="clr"></div></h3><ul class="menu">'.$data2.'</ul></div></div>';
    }
  }
  if ($data1) {
    $data = '<div class="row category_home_blocks">'.$data1.'</div>';
  }
  return $data;
}

function flatclassifieds_helper_block_adscategorybigtitle() {//
  global $user;
  $types = array('classified', 'classified_noex');
  $out = 0;
  $query = db_select('node', 'n');
  $query->addTag('node_access');
  $query->condition('n.status', 1, '=');
  $query->condition('n.type', $types, 'IN');
  $query->addExpression('COUNT(n.nid)');
  $count = $query->execute()->fetchCol();
  if (isset($count[0]) and $count[0] and is_numeric($count[0])) { $out = $count[0]; }
  $term = taxonomy_get_tree(3, 0, 1);
  $data = '<h3 class="count_title">'.t('Browse our !ads Ads from !categories Categories', array('!ads' => $out, '!categories' => count($term))).'</h3>';
  return $data;
}


function flatclassifieds_helper_block_adsinfo() {
  $data = '';
  if (arg(0) == 'node' and is_numeric(arg(1)) and !arg(2)) {
    $node = node_load(arg(1));
    if ($GLOBALS['user']->uid == $node->uid) {
      $data .= '<div class="navcat">';
      $data .= '<br />';
      $data .= '<ul class="menu i">';
      $data .= '<li class="leaf">'.l('Highlight the Ad in the list ', 'node/'.arg(1).'/highlight', array('html' => true)).'</li>';
      $data .= '<li class="leaf">'.l('Stick the Ad at the top of the list', 'node/'.arg(1).'/sticky', array('html' => true)).'</li>';
      if ($highlight = flatclassifieds_helper_timeline($node->nid))
        $data .= '<li class="leaf">'.t('The add is highlighted for !time', array( '!time' => $highlight)).'</li>';
      if ($sticky = flatclassifieds_helper_timeline($node->nid, 'sticky'))
        $data .= '<li class="leaf">'.t('The add is stuck for !time', array( '!time' => $sticky)).'</li>';
      $data .= '</ul>';
      $data .= '</div>';
    }
  }
  return $data;
}

function flatclassifieds_helper_is_page_manager() {

  $tasks = page_manager_get_tasks();
  $is_page_manager = FALSE;
  // Provide menu items for each task.
  foreach ($tasks as $task_id => $task) {
    if (isset($task['admin path']) and !$task['disabled']) {
    //$function = ctools_plugin_get_function($task, 'hook menu');
      //$items = array();
      //$function($items, $task);
      //drupal_set_message('<pre>task: '. check_plain(print_r($function, 1)) .'</pre>');
      //drupal_set_message('<pre>task: '. check_plain(print_r($task, 1)) .'</pre>');
      $el = explode('/', $task['admin path']);
      $is_el = FALSE;
      $i = 0;
      foreach ($el as $item) {
        if (strpos($item, '%') === FALSE and strpos($item, '!') === FALSE) {
          //drupal_set_message('<pre>task: '. arg($i) .' - '. $item .'</pre>');
          if (arg($i) == $item) {
            $is_el = TRUE;
          } else {
            $is_el = FALSE;
            break;
          }
        } elseif ((strpos($item, '%') !== FALSE and is_numeric(arg($i))) or (strpos($item, '!') !== FALSE )) {
          $is_el = TRUE;
        } else {
          $is_el = FALSE;
          break;
        }
        $i++;
      }
//       if (arg($i)) {
//         $is_el = TRUE;
//       }
      if ($is_el and (!arg($i) or (arg(0) == 'taxonomy' and arg($i)) ) ) {
        $is_page_manager = TRUE;
        //drupal_set_message('<pre>task: '. check_plain(print_r($is_page_manager, 1)) .'</pre>');
        //return $is_page_manager;
      }
    }

    foreach (page_manager_get_task_subtasks($task) as $subtask_id => $subtask) {
      if (isset($subtask['admin path']) and !$subtask['disabled']) {
      //$function = ctools_plugin_get_function($subtask, 'hook menu');
      //$items = array();
      //$function($items, $subtask);
      //drupal_set_message('<pre>subtask: '. check_plain(print_r($function, 1)) .'</pre>');
        //drupal_set_message('<pre>subtask: '. check_plain(print_r($subtask, 1)) .'</pre>');
        $el = explode('/', $subtask['admin path']);
        $is_el = FALSE;
        $i = 0;
        foreach ($el as $item) {
          if (strpos($item, '%') === FALSE and strpos($item, '!') === FALSE) {
            if (arg($i) == $item) {
              $is_el = TRUE;
            } else {
              $is_el = FALSE;
              break;
            }
          } elseif ((strpos($item, '%') !== FALSE and is_numeric(arg($i))) or (strpos($item, '!') !== FALSE )) {
            $is_el = TRUE;
          } else {
            $is_el = FALSE;
            break;
          }
          $i++;
        }
        if ($is_el and (!arg($i) or (arg(0) == 'taxonomy' and arg($i)) ) ) {
          $is_page_manager = TRUE;
          //drupal_set_message('<pre>task: '. check_plain(print_r($is_page_manager, 1)) .'</pre>');
          return $is_page_manager;
        }

      }
    }
  }
  return $is_page_manager;
}


function flatclassifieds_helper_get_term_icon ($tid, $style_name = 'teaser_icon') {
  $query = db_select('field_data_field_icon_fa', 'i');
  $query->condition('i.entity_id', $tid);
  $query->fields('i', array('field_icon_fa_value'));
  $icon = $query->execute()->fetchField();

  $query = db_select('field_data_field_color_icon', 'i');
  $query->condition('i.entity_id', $tid);
  $query->fields('i', array('field_color_icon_jquery_colorpicker'));
  $color = $query->execute()->fetchField();

  $query = db_select('field_data_field_background_color_icon', 'i');
  $query->condition('i.entity_id', $tid);
  $query->fields('i', array('field_background_color_icon_jquery_colorpicker'));
  $background = $query->execute()->fetchField();

  if ($icon and $icon != '_none') {
    return '<div class="termimg"><div class="termimgico '.$style_name.'" style="'.($color ? 'color:#'.$color.';' : '').($background ? 'background-color:#'.$background.';' : '').'">'.$icon.'</div></div>';
  } else {
    $query = db_select('field_data_field_icon', 'i');
    $query->condition('i.entity_id', $tid);
    $query->fields('i', array('field_icon_fid', 'field_icon_alt', 'field_icon_title', 'field_icon_width', 'field_icon_height'));
    $result = $query->execute();
    foreach ($result as $item) {
      if ($item->field_icon_fid && ($file = file_load($item->field_icon_fid))) {
        $variables = array();
        $variables['alt'] = $item->field_icon_alt;
        $variables['title'] = $item->field_icon_title;
        $variables['width'] = $item->field_icon_width;
        $variables['height'] = $item->field_icon_height;
        $variables['style_name'] = $style_name;
        $variables['path'] = $file->uri;
      }
    }
    //drupal_set_message('<pre>'. check_plain(print_r($variables, 1)) .'</pre>');
    if (isset($variables)) {
      return '<div class="termimg">'.theme('image_style', $variables).'</div>';
    } else {
      $terms = taxonomy_get_parents($tid);
      //drupal_set_message('<pre>'. check_plain(print_r($terms, 1)) .'</pre>');
      foreach ($terms as $item) {
        if (isset($item->tid)) {
          return flatclassifieds_helper_get_term_icon($item->tid, $style_name);
        }
      }
      return '';
    }
  }
}

function flatclassifieds_helper_nodes_count($tid) {
  global $user;
  $out = 0;
  $query = db_select('taxonomy_index', 'v');
  if ($user->uid != 1) {
    $query->join('node', 'n', 'n.nid = v.nid');
    $query->addTag('node_access');
    $query->condition('n.status', 1, '=');
  }
  $query->condition('v.tid', $tid, '=');
  $query->addExpression('COUNT(v.nid)');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function flatclassifieds_helper_name_term($term) {
  global $language;
  //$tx = taxonomy_term_load($term->tid);
  //$langcode = $GLOBALS['language_content']->language;
  //taxonomy_term_build_content($tx, 'full', $langcode);
  if (function_exists('i18n_taxonomy_term_name')) {
    $term->name = i18n_taxonomy_term_name($term);
    //drupal_set_message('<pre>'. check_plain(print_r($term, 1)) .'</pre>');
  }
  if ($language->direction == 1) {
    $name = '<b title="'.t('The total number of ads in the category').'">'.flatclassifieds_helper_three_nodes_counts($term->tid).'</b>'.$term->name;
  } else {
    $name = $term->name.'<span class="count" title="'.t('The total number of ads in the category').'">'.flatclassifieds_helper_three_nodes_counts($term->tid).'</span>';
  }
  return $name;
}

function flatclassifieds_helper_three_nodes_counts($tid) {
  global $user;
  static $data = array();
  if ($user->uid != 1 and !count($data)) {
    $data_o = cache_get('pch_nodes_counts');
    if (isset($data_o->data)) $data = $data_o->data;
    //drupal_set_message('<pre>'. check_plain(print_r($data, 1)) .'</pre>');
  }

  if ($user->uid != 1 and isset($data[$tid])){
    $out = $data[$tid];
  } else {
    $out = flatclassifieds_helper_nodes_count($tid);
    $result = taxonomy_get_tree(3, $tid);
    foreach ($result as $term) {
      $out = $out + flatclassifieds_helper_nodes_count($term->tid);
    }
    if ($user->uid != 1) {
      $data[$tid] = $out;
      cache_set('pch_nodes_counts', $data);
    }
  }
  return $out;
}

function flatclassifieds_helper_form_alter(&$form, $form_state, $form_id) {
  global $user;
  //drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
  //drupal_set_message('<pre>'. check_plain(print_r($form_id, 1)) .'</pre>');
  //watchdog('upload_file', '<pre>'. check_plain(print_r($_FILES, 1)) .'</pre>');
  if ($form_id == 'classified_node_form' and $user->uid) {
    if (isset($form['field_email']) and !$form['field_email'][$form['field_email']['#language']][0]['email']['#default_value']) {
      $form['field_email'][$form['field_email']['#language']][0]['email']['#default_value'] = $user->mail;
    }
    if (isset($_GET['fid']) and is_numeric($_GET['fid'])) {
      $file = file_load($_GET['fid']);
      if ($fileinfo = image_get_info(drupal_realpath($file->uri))) {
            //drupal_set_message('<pre>'. check_plain(print_r($fileinfo, 1)) .'</pre>');
            $form['field_image_ca'][$form['field_image_ca']['#language']][0]['#default_value'] = (array)$file;
            //if (isset($_GET['title'])) $form['field_image_ca'][$form['field_image_ca']['#language']][0]['#default_value']['alt'] = $_GET['title'];
            $form['field_image_ca'][$form['field_image_ca']['#language']][0]['#default_value']['title'] = '';
            $form['field_image_ca'][$form['field_image_ca']['#language']][0]['#default_value']['width'] = $fileinfo['width'];
            $form['field_image_ca'][$form['field_image_ca']['#language']][0]['#default_value']['height'] = $fileinfo['height'];
            $form['field_image_ca'][$form['field_image_ca']['#language']][0]['#description'] = '';
      }
    }
  }
  if ($form_id == 'views_exposed_form') {
    //drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
    //if(theme_get_setting('tm_value_14')) {
      $form['auto_location'] = array(
        '#type' => 'checkbox',
        '#title' => t('My Location'),
        //'#description' => t('Force'),
        '#default_value' => 1,
        '#weight' => -20,
        '#attributes' => array('checked' => 'checked'), /*(isset($_POST['auto_location']) and $_POST['auto_location']) ? array('checked' => 'checked') : array(),*/
      );
    //}
    if (isset($_GET['latitude']) and $_GET['latitude']) {
      $form['latitude'] = array(
        '#type' => 'hidden',
        '#title' => 'latitude',
        '#default_value' => $_GET['latitude'],
      );
      $form['longitude'] = array(
        '#type' => 'hidden',
        '#title' => 'longitude',
        '#default_value' => $_GET['longitude'],
      );
    }
    if (isset($_GET['mob']) and $_GET['mob']) {
      $form['mob'] = array(
        '#type' => 'hidden',
        '#title' => 'mob',
        '#default_value' => $_GET['mob'],
      );
    }
  }

  if (($form_id == 'classified_node_form') and isset($form['field_category'])) {
    $query = db_select('pch_view_categories', 'c');
    $query->condition('c.entity_type', 'node');
    $query->addField('c', 'field_name');
    $field_names = $query->execute()->fetchCol();
    foreach ($field_names as $field_name) {
      if (isset($form[$field_name])) {
        $query = db_select('pch_view_categories', 'c');
        $query->condition('c.field_name', $field_name);
        $query->condition('c.entity_type', 'node');
        $query->addField('c', 'tid');
        $tids = $query->execute()->fetchCol();
        if (count($tids)) {
          $form[$field_name]['#attributes']['class'][] = 'pch-view';
          foreach ($tids as $tid) {
            $form[$field_name]['#attributes']['class'][] = 'pch-view-'.$tid;
          }
        }
      }
    }
  }

  if ($form_id == 'field_ui_field_edit_form' and $form['#instance']['field_name'] != 'field_category') {
    $form['pch_categories'] = array(
      '#type' => 'fieldset',
      '#title' => t('Show only for the category:'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('The given field will be displayed only on selected categories. If none of categories is selected then the field will be displayed on all categories.') ,
    );
    $terms = taxonomy_get_tree(3);
    foreach ($terms as $term) {
      $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
    }
    $query = db_select('pch_view_categories', 'c');
    $query->condition('c.field_name', $form['#instance']['field_name']);
    $query->condition('c.entity_type', $form['#instance']['entity_type']);
    $query->addField('c', 'tid');
    $tids = $query->execute()->fetchCol();
    $form['pch_categories']['pch_view_categories'] = array(
      '#type' => 'checkboxes',
      '#title' => t(''),
      '#default_value' => $tids,
      '#options' => $options,
    );
    $form['#submit'][] = 'flatclassifieds_helper_pchfield_submit';
  }

  if ($form_id == 'field_ui_field_overview_form' and $form['#bundle'] == 'classified') {
    if (isset($form['#fields']) and is_array($form['#fields'])) {
      $terms = taxonomy_get_tree(3);
      foreach ($terms as $term) {
        $options[$term->tid] = $term->name;
      }
      foreach ($form['#fields'] as $field) {
        $query = db_select('pch_view_categories', 'c');
        $query->condition('c.field_name', $field);
        $query->condition('c.entity_type', $form['#entity_type']);
        $query->addField('c', 'tid');
        $tids = $query->execute()->fetchCol();
        $out = '';
        foreach ($tids as $term) {
          if ($out) $out .= ', '.$options[$term]; else $out .= $options[$term];
        }
        if ($out) {
          $form['fields'][$field]['label']['#markup'] = $form['fields'][$field]['label']['#markup'].'<div style="color:green;font-size:9px;">'.t('Show on').': '.$out.'</div>';
        }
      }
    }
  }

  if ($form_id == 'taxonomy_form_term') {
    if (isset($form['#vocabulary']->vid) and $form['#vocabulary']->vid == 3 and is_array($form['#term']) and isset($form['#term']['tid'])) {
			$form['taxonomy_show_big'] = array(
				'#type' => 'checkbox',
				'#title' => t('Show in Ads Category (Big)'),
				'#default_value' => variable_get('taxonomy_show_big_'.$form['#term']['tid'], TRUE),
				//'#weight' => -20,
			);
			$form['#submit'][] = 'flatclassifieds_helper_taxonomy_show_big_submit';
      //drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
      //drupal_set_message('<pre>'. variable_get('taxonomy_show_big_'.$form['#term']['tid'], TRUE) .'</pre>');
    }
  }

}

function flatclassifieds_helper_taxonomy_show_big_submit($form, &$form_state) {
  //drupal_set_message('<pre>'. check_plain(print_r($form_state, 1)) .'</pre>');
  if ($form_state['values']['taxonomy_show_big'])
    //variable_set('taxonomy_show_big_'.$form_state['term']->tid, TRUE);
    variable_del('taxonomy_show_big_'.$form_state['term']->tid);
  else
    variable_set('taxonomy_show_big_'.$form_state['term']->tid, FALSE);
  //drupal_set_message('<pre>'. variable_get('taxonomy_show_big_'.$form_state['term']->tid, TRUE) .'</pre>');
}

function flatclassifieds_helper_pchfield_submit($form, &$form_state) {
  //drupal_set_message('<pre>'. check_plain(print_r($form_state, 1)) .'</pre>');
  if (isset($form_state['values']['pch_view_categories']) and is_array($form_state['values']['pch_view_categories'])) {
    db_delete('pch_view_categories')
      ->condition('field_name', $form_state['values']['instance']['field_name'])
      ->condition('entity_type', $form_state['values']['instance']['entity_type'])
      ->execute();
    foreach ($form_state['values']['pch_view_categories'] as $term) {
      if ($term) {
        $query = db_insert('pch_view_categories')
          ->fields(array('field_name', 'entity_type', 'tid'));
          $query->values(array(
            'field_name' => $form_state['values']['instance']['field_name'],
            'entity_type' => $form_state['values']['instance']['entity_type'],
            'tid' => $term,
          ));
        $query->execute();
      }
    }
  }
}

function flatclassifieds_helper_fields_filter(&$content) {
  //drupal_set_message('<pre>'. check_plain(print_r($content['field_category']['#items'], 1)) .'</pre>');
  static $fields = array();
  //drupal_set_message('<pre>s '. check_plain(print_r($fields, 1)) .'</pre>');
  if (isset($content['field_category']['#items'][0]['tid']) and is_numeric($content['field_category']['#items'][0]['tid'])) {
    foreach ($content as $field_name => $var) {
      if (empty($fields[$field_name])) {
        $query = db_select('pch_view_categories', 'c');
        $query->condition('c.field_name', $field_name);
        $query->condition('c.entity_type', 'node');
        $query->addField('c', 'tid');
        $fields[$field_name] = $query->execute()->fetchCol();
        //drupal_set_message('<pre>'. check_plain(print_r($field_name, 1)) .'</pre>');
      }
      if (isset($fields[$field_name]) and count($fields[$field_name]) and !in_array($content['field_category']['#items'][0]['tid'], $fields[$field_name])) {
        unset($content[$field_name]);
      }
    }
  }
  //drupal_set_message('<pre>e '. check_plain(print_r($fields, 1)) .'</pre>');
}

function flatclassifieds_helper_node_insert($node) {
  cache_clear_all('pch_nodes_counts', 'cache');
}

function flatclassifieds_helper_node_update($node) {
  cache_clear_all('pch_nodes_counts', 'cache');
}

function flatclassifieds_helper_node_delete($node) {
  cache_clear_all('pch_nodes_counts', 'cache');
}

function flatclassifieds_helper_detect_location($ip) {
  global $user;


  static $loc = array();
  $default = 'UNKNOWN';

  if (empty($loc['latitude'])) {

    if (theme_get_setting('tm_value_user_location') == 1 and theme_get_setting('tm_value_default_user_location')) {
      $ul = theme_get_setting('tm_value_default_user_location');
      $ula = explode(',', $ul);
      if (isset($ula[1])) {
        $loc = array('country' => '', 'city' => '', 'state' => '', 'latitude' => $ula[0], 'longitude' => $ula[1]);
        return $loc;
      }
    }

    $acc = user_load($user->uid);

    if (isset($acc->location['latitude'])) {

      $loc = array('country' => $acc->location['country'], 'city' => $acc->location['city'], 'state' => $acc->location['province'], 'latitude' => $acc->location['latitude'], 'longitude' => $acc->location['longitude']);
      flatclassifieds_helper_set_location_tag($loc);

      //drupal_set_message('<pre>s '. check_plain(print_r($loc, 1)) .'</pre>');

      return $loc;
    } else {
      $result = db_select('users_location_cache')->fields('users_location_cache', array('country', 'city', 'state', 'latitude', 'longitude'))->condition('ip', $ip, '=')->execute();
      foreach ($result as $res) {
        $loc = array('country' => $res->country, 'city' => $res->city, 'state' => $res->state, 'latitude' => $res->latitude, 'longitude' => $res->longitude);
      }
    }


    if (empty($loc['latitude'])) {
      if (!is_string($ip) || strlen($ip) < 1 || $ip == '127.0.0.1' || $ip == 'localhost') {
        if (theme_get_setting('tm_value_default_user_location')) {
          $ul = theme_get_setting('tm_value_default_user_location');
          $ula = explode(',', $ul);
          if (isset($ula[1])) {
            $loc = array('country' => '', 'city' => '', 'state' => '', 'latitude' => $ula[0], 'longitude' => $ula[1]);
            return $loc;
          }
        }
        return array();
      }
      //$curlopt_useragent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2) Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729)';
      //$url = 'http://ipinfodb.com/ip_locator.php?ip=' . urlencode($ip);

      $url = 'http://ipinfodb.com/ip_locator.php';
      $post = Array('ip' => urlencode($ip));
      $headers = Array();
      $headers[] = "Content-type: application/x-www-form-urlencoded";
      $uagent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2) Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729)';

      $content = flatclassifieds_helper_http_post_request($url, $post, false, $headers = '', $uagent = '');

      if (!$content) return array();
//       $ch = curl_init();
//       $curl_opt = array(
//         CURLOPT_FOLLOWLOCATION  => 1,
//         CURLOPT_HEADER      => 0,
//         CURLOPT_RETURNTRANSFER  => 1,
//         CURLOPT_USERAGENT   => $curlopt_useragent,
//         CURLOPT_URL       => $url,
//         CURLOPT_TIMEOUT         => 1,
//         CURLOPT_REFERER         => 'http://' . $_SERVER['HTTP_HOST'],
//       );
//       curl_setopt_array($ch, $curl_opt);
//       $content = curl_exec($ch);
//         //if (!is_null($curl_info)) {
//             //$curl_info = curl_getinfo($ch);
//         //}
//       curl_close($ch);

      //drupal_set_message('<pre>c '. check_plain(print_r($content, 1)) .'</pre>');

      if ( preg_match('{<li>Country : ([^<]*)</li>}i', $content, $regs) )  {
        $country = $regs[1];
      }
      if ( preg_match('{<li>Country : ([^<]*)<img}i', $content, $regs) )  {
        $country = $regs[1];
      }
      if ( preg_match('{<li>City : ([^<]*)</li>}i', $content, $regs) )  {
        $city = $regs[1];
      }
      if ( preg_match('{<li>State/Province : ([^<]*)</li>}i', $content, $regs) )  {
        $state = $regs[1];
      }
      if ( preg_match('{<li>Latitude : ([^<]*)</li>}i', $content, $regs) )  {
        $latitude = $regs[1];
      }
      if ( preg_match('{<li>Longitude : ([^<]*)</li>}i', $content, $regs) )  {
        $longitude = $regs[1];
      }
      if(isset($city) && $city != '' && $latitude != '' ){
        $loc = array('country' => $country, 'city' => $city, 'state' => $state, 'latitude' => $latitude, 'longitude' => $longitude);
        $query = db_insert('users_location_cache')->fields(array('ip', 'uid', 'country', 'city', 'state', 'latitude', 'longitude'));
        $query->values(array('ip' => $ip,'uid' => $user->uid, 'country' => $country, 'city' => $city, 'state' => $state, 'latitude' => $latitude, 'longitude' => $longitude));
        $query->execute();
        flatclassifieds_helper_set_location_tag($loc);
        flatclassifieds_helper_get_mobile_location($loc);
        return $loc;
      } else {
        if (theme_get_setting('tm_value_default_user_location')) {
          $ul = theme_get_setting('tm_value_default_user_location');
          $ula = explode(',', $ul);
          if (isset($ula[1])) {
            $loc = array('country' => '', 'city' => '', 'state' => '', 'latitude' => $ula[0], 'longitude' => $ula[1]);
            return $loc;
          }
        }
        return array();
      }
    } else {
      flatclassifieds_helper_set_location_tag($loc);
      flatclassifieds_helper_get_mobile_location($loc);
      return $loc;
    }
  } else {
    flatclassifieds_helper_set_location_tag($loc);
    flatclassifieds_helper_get_mobile_location($loc);
    return $loc;
  }
}

function flatclassifieds_helper_get_mobile_location(&$loc) {
  if (isset($_GET['latitude']) and $_GET['latitude']) {
    $loc['latitude'] = $_GET['latitude'];
    $loc['longitude'] = $_GET['longitude'];
  }
  //drupal_set_message('<pre>'. check_plain($_GET['latitude'].' - '.$_GET['longitude']) .'</pre>');
  //drupal_set_message('<pre>'. check_plain($loc['latitude'].' - '.$loc['longitude']) .'</pre>');
}

function flatclassifieds_helper_set_location_tag($loc) {
        if (theme_get_setting('tm_value_15') and user_access('create classified content')) {
          $country_code_to_number = array(
            "" => 0, "AP" => 1, "EU" => 2, "AD" => 3, "AE" => 4, "AF" => 5,
            "AG" => 6, "AI" => 7, "AL" => 8, "AM" => 9, "AN" => 10, "AO" => 11,
            "AQ" => 12, "AR" => 13, "AS" => 14, "AT" => 15, "AU" => 16, "AW" => 17,
            "AZ" => 18, "BA" => 19, "BB" => 20, "BD" => 21, "BE" => 22, "BF" => 23,
            "BG" => 24, "BH" => 25, "BI" => 26, "BJ" => 27, "BM" => 28, "BN" => 29,
            "BO" => 30, "BR" => 31, "BS" => 32, "BT" => 33, "BV" => 34, "BW" => 35,
            "BY" => 36, "BZ" => 37, "CA" => 38, "CC" => 39, "CD" => 40, "CF" => 41,
            "CG" => 42, "CH" => 43, "CI" => 44, "CK" => 45, "CL" => 46, "CM" => 47,
            "CN" => 48, "CO" => 49, "CR" => 50, "CU" => 51, "CV" => 52, "CX" => 53,
            "CY" => 54, "CZ" => 55, "DE" => 56, "DJ" => 57, "DK" => 58, "DM" => 59,
            "DO" => 60, "DZ" => 61, "EC" => 62, "EE" => 63, "EG" => 64, "EH" => 65,
            "ER" => 66, "ES" => 67, "ET" => 68, "FI" => 69, "FJ" => 70, "FK" => 71,
            "FM" => 72, "FO" => 73, "FR" => 74, "FX" => 75, "GA" => 76, "GB" => 77,
            "GD" => 78, "GE" => 79, "GF" => 80, "GH" => 81, "GI" => 82, "GL" => 83,
            "GM" => 84, "GN" => 85, "GP" => 86, "GQ" => 87, "GR" => 88, "GS" => 89,
            "GT" => 90, "GU" => 91, "GW" => 92, "GY" => 93, "HK" => 94, "HM" => 95,
            "HN" => 96, "HR" => 97, "HT" => 98, "HU" => 99, "ID" => 100, "IE" => 101,
            "IL" => 102, "IN" => 103, "IO" => 104, "IQ" => 105, "IR" => 106, "IS" => 107,
            "IT" => 108, "JM" => 109, "JO" => 110, "JP" => 111, "KE" => 112, "KG" => 113,
            "KH" => 114, "KI" => 115, "KM" => 116, "KN" => 117, "KP" => 118, "KR" => 119,
            "KW" => 120, "KY" => 121, "KZ" => 122, "LA" => 123, "LB" => 124, "LC" => 125,
            "LI" => 126, "LK" => 127, "LR" => 128, "LS" => 129, "LT" => 130, "LU" => 131,
            "LV" => 132, "LY" => 133, "MA" => 134, "MC" => 135, "MD" => 136, "MG" => 137,
            "MH" => 138, "MK" => 139, "ML" => 140, "MM" => 141, "MN" => 142, "MO" => 143,
            "MP" => 144, "MQ" => 145, "MR" => 146, "MS" => 147, "MT" => 148, "MU" => 149,
            "MV" => 150, "MW" => 151, "MX" => 152, "MY" => 153, "MZ" => 154, "NA" => 155,
            "NC" => 156, "NE" => 157, "NF" => 158, "NG" => 159, "NI" => 160, "NL" => 161,
            "NO" => 162, "NP" => 163, "NR" => 164, "NU" => 165, "NZ" => 166, "OM" => 167,
            "PA" => 168, "PE" => 169, "PF" => 170, "PG" => 171, "PH" => 172, "PK" => 173,
            "PL" => 174, "PM" => 175, "PN" => 176, "PR" => 177, "PS" => 178, "PT" => 179,
            "PW" => 180, "PY" => 181, "QA" => 182, "RE" => 183, "RO" => 184, "RU" => 185,
            "RW" => 186, "SA" => 187, "SB" => 188, "SC" => 189, "SD" => 190, "SE" => 191,
            "SG" => 192, "SH" => 193, "SI" => 194, "SJ" => 195, "SK" => 196, "SL" => 197,
            "SM" => 198, "SN" => 199, "SO" => 200, "SR" => 201, "ST" => 202, "SV" => 203,
            "SY" => 204, "SZ" => 205, "TC" => 206, "TD" => 207, "TF" => 208, "TG" => 209,
            "TH" => 210, "TJ" => 211, "TK" => 212, "TM" => 213, "TN" => 214, "TO" => 215,
            "TL" => 216, "TR" => 217, "TT" => 218, "TV" => 219, "TW" => 220, "TZ" => 221,
            "UA" => 222, "UG" => 223, "UM" => 224, "US" => 225, "UY" => 226, "UZ" => 227,
            "VA" => 228, "VC" => 229, "VE" => 230, "VG" => 231, "VI" => 232, "VN" => 233,
            "VU" => 234, "WF" => 235, "WS" => 236, "YE" => 237, "YT" => 238, "RS" => 239,
            "ZA" => 240, "ZM" => 241, "ME" => 242, "ZW" => 243, "A1" => 244, "A2" => 245,
            "O1" => 246, "AX" => 247, "GG" => 248, "IM" => 249, "JE" => 250, "BL" => 251,
            "MF" => 252
          );
          $country_names = array(
            "", "Asia/Pacific Region", "Europe", "Andorra", "United Arab Emirates",
            "Afghanistan", "Antigua and Barbuda", "Anguilla", "Albania", "Armenia",
            "Netherlands Antilles", "Angola", "Antarctica", "Argentina", "American Samoa",
            "Austria", "Australia", "Aruba", "Azerbaijan", "Bosnia and Herzegovina",
            "Barbados", "Bangladesh", "Belgium", "Burkina Faso", "Bulgaria", "Bahrain",
            "Burundi", "Benin", "Bermuda", "Brunei Darussalam", "Bolivia", "Brazil",
            "Bahamas", "Bhutan", "Bouvet Island", "Botswana", "Belarus", "Belize",
            "Canada", "Cocos (Keeling) Islands", "Congo, The Democratic Republic of the",
            "Central African Republic", "Congo", "Switzerland", "Cote D'Ivoire", "Cook Islands",
            "Chile", "Cameroon", "China", "Colombia", "Costa Rica", "Cuba", "Cape Verde",
            "Christmas Island", "Cyprus", "Czech Republic", "Germany", "Djibouti",
            "Denmark", "Dominica", "Dominican Republic", "Algeria", "Ecuador", "Estonia",
            "Egypt", "Western Sahara", "Eritrea", "Spain", "Ethiopia", "Finland", "Fiji",
            "Falkland Islands (Malvinas)", "Micronesia, Federated States of", "Faroe Islands",
            "France", "France, Metropolitan", "Gabon", "United Kingdom",
            "Grenada", "Georgia", "French Guiana", "Ghana", "Gibraltar", "Greenland",
            "Gambia", "Guinea", "Guadeloupe", "Equatorial Guinea", "Greece", "South Georgia and the South Sandwich Islands",
            "Guatemala", "Guam", "Guinea-Bissau",
            "Guyana", "Hong Kong", "Heard Island and McDonald Islands", "Honduras",
            "Croatia", "Haiti", "Hungary", "Indonesia", "Ireland", "Israel", "India",
            "British Indian Ocean Territory", "Iraq", "Iran, Islamic Republic of",
            "Iceland", "Italy", "Jamaica", "Jordan", "Japan", "Kenya", "Kyrgyzstan",
            "Cambodia", "Kiribati", "Comoros", "Saint Kitts and Nevis", "Korea, Democratic People's Republic of",
            "Korea, Republic of", "Kuwait", "Cayman Islands",
            "Kazakhstan", "Lao People's Democratic Republic", "Lebanon", "Saint Lucia",
            "Liechtenstein", "Sri Lanka", "Liberia", "Lesotho", "Lithuania", "Luxembourg",
            "Latvia", "Libyan Arab Jamahiriya", "Morocco", "Monaco", "Moldova, Republic of",
            "Madagascar", "Marshall Islands", "Macedonia",
            "Mali", "Myanmar", "Mongolia", "Macau", "Northern Mariana Islands",
            "Martinique", "Mauritania", "Montserrat", "Malta", "Mauritius", "Maldives",
            "Malawi", "Mexico", "Malaysia", "Mozambique", "Namibia", "New Caledonia",
            "Niger", "Norfolk Island", "Nigeria", "Nicaragua", "Netherlands", "Norway",
            "Nepal", "Nauru", "Niue", "New Zealand", "Oman", "Panama", "Peru", "French Polynesia",
            "Papua New Guinea", "Philippines", "Pakistan", "Poland", "Saint Pierre and Miquelon",
            "Pitcairn Islands", "Puerto Rico", "Palestinian Territory",
            "Portugal", "Palau", "Paraguay", "Qatar", "Reunion", "Romania",
            "Russian Federation", "Rwanda", "Saudi Arabia", "Solomon Islands",
            "Seychelles", "Sudan", "Sweden", "Singapore", "Saint Helena", "Slovenia",
            "Svalbard and Jan Mayen", "Slovakia", "Sierra Leone", "San Marino", "Senegal",
            "Somalia", "Suriname", "Sao Tome and Principe", "El Salvador", "Syrian Arab Republic",
            "Swaziland", "Turks and Caicos Islands", "Chad", "French Southern Territories",
            "Togo", "Thailand", "Tajikistan", "Tokelau", "Turkmenistan",
            "Tunisia", "Tonga", "Timor-Leste", "Turkey", "Trinidad and Tobago", "Tuvalu",
            "Taiwan", "Tanzania, United Republic of", "Ukraine",
            "Uganda", "United States Minor Outlying Islands", "United States", "Uruguay",
            "Uzbekistan", "Holy See (Vatican City State)", "Saint Vincent and the Grenadines",
            "Venezuela", "Virgin Islands, British", "Virgin Islands, U.S.",
            "Vietnam", "Vanuatu", "Wallis and Futuna", "Samoa", "Yemen", "Mayotte",
            "Serbia", "South Africa", "Zambia", "Montenegro", "Zimbabwe",
            "Anonymous Proxy","Satellite Provider","Other",
            "Aland Islands","Guernsey","Isle of Man","Jersey","Saint Barthelemy","Saint Martin"
          );
          $st = drupal_strtoupper(trim($loc['country']));
          if (isset($country_code_to_number[$st])) {
            $country = $country_names[$country_code_to_number[$st]];
            $tidce = $tidcie = TRUE;
            $tidc = 0;
            $tidca = taxonomy_get_term_by_name($country, 'location');
            foreach($tidca as $parent) {
              $tidce = FALSE;
              $tidc = $parent->tid;
              $tidcia = taxonomy_get_term_by_name($loc['city'], 'location');
              foreach ($tidcia as $item) {
                $result = db_select('taxonomy_term_hierarchy', 't')->fields('t', array('parent'))->condition('t.tid', $item->tid)->execute();
                foreach ($result as $item1) {
                  if ($item1->parent == $tidc) {
                    $tidcie = FALSE;
                  }
                }
              }
            }
            if ($tidce) {
              $term = new stdClass;
              $term->vid = 4;
              $term->name = $country;
              $term->parent = 0;
              taxonomy_term_save($term);
              $tidc = $term->tid;
            }
            if ($tidcie and $tidc) {
              $term = new stdClass;
              $term->vid = 4;
              $term->name = $loc['city'];
              $term->parent = $tidc;
              unset($term->tid);
              taxonomy_term_save($term);
            }
          }
        }
     }


function flatclassifieds_helper_get_location() {
  //$a = flatclassifieds_helper_detect_location($_SERVER['REMOTE_ADDR']);
  //drupal_set_message($a['country'].', '.$a['city'].', '.$a['latitude'].', '.$a['longitude']);
  //drupal_set_message('<pre>'. check_plain(print_r($_REQUEST, 1)) .'</pre>');
  if (isset($_REQUEST['auto_location']) and $_REQUEST['auto_location']){
    $l = flatclassifieds_helper_detect_location($_SERVER['REMOTE_ADDR']);
    //drupal_set_message($l['country'].', '.$l['city'].', '.$l['latitude'].', '.$l['longitude']);
    if (isset($l['latitude'])) {
      return array('latitude' => $l['latitude'] , 'longitude' => $l['longitude']);
    } else {
      return FALSE;
    }
  } else {
    return FALSE;
  }
}


function flatclassifieds_helper_preprocess_html(&$vars) {
  if (isset($vars['page']['page_top']['toolbar'])) {
    $vars['classes_array'][] = 'toolbar';
    if (!_toolbar_is_collapsed()) {
      $vars['classes_array'][] = 'toolbar-drawer';
    }
  }
}


function flatclassifieds_helper_url_outbound_alter(&$path, &$options, $original_path) {
  if (isset($_GET['mob']) and $_GET['mob']) {
    $options['query']['mob'] = 1;
  }
  if (isset($_GET['latitude']) and $_GET['latitude']) {
    $options['query']['latitude'] = $_GET['latitude'];
  }
  if (isset($_GET['longitude']) and $_GET['longitude']) {
    $options['query']['longitude'] = $_GET['longitude'];
  }
}

function flatclassifieds_helper_mobile_top_out() {
  global $user, $base_url;
  drupal_add_js('misc/tableheader.js');
  drupal_add_js('misc/jquery.cookie.js');
  drupal_add_js(drupal_get_path('module','toolbar').'/toolbar.js');
  drupal_add_js(array('tableHeaderOffset' => 'Drupal.toolbar.height'),'setting');
  drupal_add_css(drupal_get_path('module','toolbar').'/toolbar.css');

  $out = '';
  $out .= '<a href="'.url('', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_home.png'.'" /></a>';
  $out .= '<a href="'.url('category-list', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_show_list.png'.'" /></a>';
  if ($user->uid) {
    $out .= '<a href="JavaScript:console.log(\'uploadPH\');uploadPH();"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_add.png'.'" /></a>';
    $out .= '<a href="'.url('user/logout', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_logout.png'.'" /></a>';
  } else {
    //if (arg(0) == 'user' and arg(1) != 'register') {
      $out .= '<a href="'.url('user/register', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_invite.png'.'" /></a>';
    //} else {
      $out .= '<a href="'.url('user', array('absolute' => TRUE, 'query' => array('mob' => '1'))).'"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_login.png'.'" /></a>';
    //}
  }

  $out .= '<a href="JavaScript:history.back();"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_revert.png'.'" /></a>';
  $out .= '<a href="JavaScript:window.location.reload(1);"><img src="'.$base_url.'/'.drupal_get_path('theme','flatclassifieds').'/img/ic_menu_refresh.png'.'" /></a>';
  //$out .= '<a href="JavaScript:onDeviceReady();">D</a>';
  return $out;
}

function flatclassifieds_helper_http_post_request($url, $post, $ssl = false, $headers = '', $uagent = '') {
  //drupal_set_message('<pre>c '. check_plain(print_r($url, 1)) .'</pre>');
  if (empty($url)) { return false; }
  $_post = Array();
  if (is_array($post)) {
    foreach ($post as $name => $value) {
      $_post[] = $name.'='.urlencode($value);
    }
  }
  $ch = curl_init($url);
  if ($ssl) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  }
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
  if (is_array($post)) {
    curl_setopt($ch, CURLOPT_POSTFIELDS, join('&', $_post));
  }
  if (is_array($headers)) {
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  }
  if (!empty($uagent)) {
    curl_setopt($ch, CURLOPT_USERAGENT, $uagent);
  }
  $result = curl_exec($ch);
  if (curl_errno($ch) != 0 && empty($result)) {
    $result = false;
  }
  curl_close($ch);
  return $result;
}

function flatclassifieds_helper_mobilefileupload() {
  global $user;
  //watchdog('upload_file', '<pre>'. check_plain(print_r($_FILES, 1)) .'</pre>');

  $file = new stdClass();
  $file->uid      = $user->uid;
  $file->status   = 0;
  $file->filename = trim(drupal_basename($_FILES['file']['name']), '.');
  $file->uri      = $_FILES['file']['tmp_name'];
  $file->filemime = file_get_mimetype($file->filename);
  $file->filesize = $_FILES['file']['size'];

  $destination = file_default_scheme() . '://';
  $file->destination = file_destination($destination . $file->filename, FILE_EXISTS_RENAME);

  $file->uri = $file->destination;
  if (drupal_move_uploaded_file($_FILES['file']['tmp_name'], $file->uri)) {
    drupal_chmod($file->uri);
  }
  if ($file = file_save($file)) {
    print $file->fid;
  }
  exit;
}


function flatclassifieds_helper_currency_info() {
  return array(
    'AED' => array(
      'code' => 'AED',
      'symbol' => 'د.إ',
      'name' => t('United Arab Emirates Dirham'),
      'numeric_code' => '784',
      'code_placement' => 'before',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Dirham'),
    ),
    'AFN' => array(
      'code' => 'AFN',
      'symbol' => 'Af',
      'name' => t('Afghan Afghani'),
      'decimals' => 0,
      'numeric_code' => '971',
      'minor_unit' => t('Pul'),
      'major_unit' => t('Afghani'),
    ),
    'ANG' => array(
      'code' => 'ANG',
      'symbol' => 'NAf.',
      'name' => t('Netherlands Antillean Guilder'),
      'numeric_code' => '532',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Guilder'),
    ),
    'AOA' => array(
      'code' => 'AOA',
      'symbol' => 'Kz',
      'name' => t('Angolan Kwanza'),
      'numeric_code' => '973',
      'minor_unit' => t('Cêntimo'),
      'major_unit' => t('Kwanza'),
    ),
    'ARM' => array(
      'code' => 'ARM',
      'symbol' => 'm$n',
      'name' => t('Argentine Peso Moneda Nacional'),
      'minor_unit' => t('Centavos'),
      'major_unit' => t('Peso'),
    ),
    'ARS' => array(
      'code' => 'ARS',
      'symbol' => 'AR$',
      'name' => t('Argentine Peso'),
      'numeric_code' => '032',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'AUD' => array(
      'code' => 'AUD',
      'symbol' => 'AU$',
      'name' => t('Australian Dollar'),
      'numeric_code' => '036',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'AWG' => array(
      'code' => 'AWG',
      'symbol' => 'Afl.',
      'name' => t('Aruban Florin'),
      'numeric_code' => '533',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Guilder'),
    ),
    'AZN' => array(
      'code' => 'AZN',
      'symbol' => 'man.',
      'name' => t('Azerbaijanian Manat'),
      'minor_unit' => t('Qəpik'),
      'major_unit' => t('New Manat'),
    ),
    'BAM' => array(
      'code' => 'BAM',
      'symbol' => 'KM',
      'name' => t('Bosnia-Herzegovina Convertible Mark'),
      'numeric_code' => '977',
      'minor_unit' => t('Fening'),
      'major_unit' => t('Convertible Marka'),
    ),
    'BBD' => array(
      'code' => 'BBD',
      'symbol' => 'Bds$',
      'name' => t('Barbadian Dollar'),
      'numeric_code' => '052',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'BDT' => array(
      'code' => 'BDT',
      'symbol' => 'Tk',
      'name' => t('Bangladeshi Taka'),
      'numeric_code' => '050',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Taka'),
    ),
   'BGN' => array(
     'code' => 'BGN',
     'symbol' => 'лв',
     'name' => t('Bulgarian lev'),
     'thousands_separator' => ' ',
     'decimal_separator' => ',',
     'symbol_placement' => 'after',
     'code_placement' => '',
     'numeric_code' => '975',
     'minor_unit' => t('Stotinka'),
     'major_unit' => t('Lev'),
    ),
    'BHD' => array(
      'code' => 'BHD',
      'symbol' => 'BD',
      'name' => t('Bahraini Dinar'),
      'decimals' => 3,
      'numeric_code' => '048',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Dinar'),
    ),
    'BIF' => array(
      'code' => 'BIF',
      'symbol' => 'FBu',
      'name' => t('Burundian Franc'),
      'decimals' => 0,
      'numeric_code' => '108',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'BMD' => array(
      'code' => 'BMD',
      'symbol' => 'BD$',
      'name' => t('Bermudan Dollar'),
      'numeric_code' => '060',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'BND' => array(
      'code' => 'BND',
      'symbol' => 'BN$',
      'name' => t('Brunei Dollar'),
      'numeric_code' => '096',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Dollar'),
    ),
    'BOB' => array(
      'code' => 'BOB',
      'symbol' => 'Bs',
      'name' => t('Bolivian Boliviano'),
      'numeric_code' => '068',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Bolivianos'),
    ),
    'BRL' => array(
      'code' => 'BRL',
      'symbol' => 'R$',
      'name' => t('Brazilian Real'),
      'numeric_code' => '986',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'thousands_separator' => '.',
      'decimal_separator' => ',',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Reais'),
    ),
    'BSD' => array(
      'code' => 'BSD',
      'symbol' => 'BS$',
      'name' => t('Bahamian Dollar'),
      'numeric_code' => '044',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'BTN' => array(
      'code' => 'BTN',
      'symbol' => 'Nu.',
      'name' => t('Bhutanese Ngultrum'),
      'numeric_code' => '064',
      'minor_unit' => t('Chetrum'),
      'major_unit' => t('Ngultrum'),
    ),
    'BWP' => array(
      'code' => 'BWP',
      'symbol' => 'BWP',
      'name' => t('Botswanan Pula'),
      'numeric_code' => '072',
      'minor_unit' => t('Thebe'),
      'major_unit' => t('Pulas'),
    ),
    'BYR' => array(
      'code' => 'BYR',
      'symbol' => 'руб.',
      'name' => t('Belarusian ruble'),
      'numeric_code' => '974',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'decimals' => 0,
      'thousands_separator' => ' ',
      'major_unit' => t('Ruble'),
    ),
    'BZD' => array(
      'code' => 'BZD',
      'symbol' => 'BZ$',
      'name' => t('Belize Dollar'),
      'numeric_code' => '084',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'CAD' => array(
      'code' => 'CAD',
      'symbol' => 'CA$',
      'name' => t('Canadian Dollar'),
      'numeric_code' => '124',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'CDF' => array(
      'code' => 'CDF',
      'symbol' => 'CDF',
      'name' => t('Congolese Franc'),
      'numeric_code' => '976',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'CHF' => array(
      'code' => 'CHF',
      'symbol' => 'Fr.',
      'name' => t('Swiss Franc'),
      'rounding_step' => '0.05',
      'numeric_code' => '756',
      'minor_unit' => t('Rappen'),
      'major_unit' => t('Franc'),
    ),
    'CLP' => array(
      'code' => 'CLP',
      'symbol' => 'CL$',
      'name' => t('Chilean Peso'),
      'decimals' => 0,
      'numeric_code' => '152',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CNY' => array(
      'code' => 'CNY',
      'symbol' => 'CN¥',
      'name' => t('Chinese Yuan Renminbi'),
      'numeric_code' => '156',
      'minor_unit' => t('Fe'),
      'major_unit' => t('Yuan Renminbi'),
    ),
    'COP' => array(
      'code' => 'COP',
      'symbol' => '$',
      'name' => t('Colombian Peso'),
      'decimals' => 0,
      'numeric_code' => '170',
      'symbol_placement' => 'before',
      'code_placement' => 'hidden',
      'thousands_separator' => '.',
      'decimal_separator' => ',',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CRC' => array(
      'code' => 'CRC',
      'symbol' => '¢',
      'name' => t('Costa Rican Colón'),
      'decimals' => 0,
      'numeric_code' => '188',
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Colón'),
    ),
    'CUC' => array(
      'code' => 'CUC',
      'symbol' => 'CUC$',
      'name' => t('Cuban Convertible Peso'),
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CUP' => array(
      'code' => 'CUP',
      'symbol' => 'CU$',
      'name' => t('Cuban Peso'),
      'numeric_code' => '192',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'CVE' => array(
      'code' => 'CVE',
      'symbol' => 'CV$',
      'name' => t('Cape Verdean Escudo'),
      'numeric_code' => '132',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Escudo'),
    ),
    'CZK' => array(
      'code' => 'CZK',
      'symbol' => 'Kč',
      'name' => t('Czech Republic Koruna'),
      'numeric_code' => '203',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Haléř'),
      'major_unit' => t('Koruna'),
    ),
    'DJF' => array(
      'code' => 'DJF',
      'symbol' => 'Fdj',
      'name' => t('Djiboutian Franc'),
      'numeric_code' => '262',
      'decimals' => 0,
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'DKK' => array(
      'code' => 'DKK',
      'symbol' => 'kr.',
      'name' => t('Danish Krone'),
      'numeric_code' => '208',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Øre'),
      'major_unit' => t('Kroner'),
    ),
    'DOP' => array(
      'code' => 'DOP',
      'symbol' => 'RD$',
      'name' => t('Dominican Peso'),
      'numeric_code' => '214',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'DZD' => array(
      'code' => 'DZD',
      'symbol' => 'DA',
      'name' => t('Algerian Dinar'),
      'numeric_code' => '012',
      'minor_unit' => t('Santeem'),
      'major_unit' => t('Dinar'),
    ),
    'EEK' => array(
      'code' => 'EEK',
      'symbol' => 'Ekr',
      'name' => t('Estonian Kroon'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'numeric_code' => '233',
      'minor_unit' => t('Sent'),
      'major_unit' => t('Krooni'),
    ),
    'EGP' => array(
      'code' => 'EGP',
      'symbol' => 'EG£',
      'name' => t('Egyptian Pound'),
      'numeric_code' => '818',
      'minor_unit' => t('Piastr'),
      'major_unit' => t('Pound'),
    ),
    'ERN' => array(
      'code' => 'ERN',
      'symbol' => 'Nfk',
      'name' => t('Eritrean Nakfa'),
      'numeric_code' => '232',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Nakfa'),
    ),
    'ETB' => array(
      'code' => 'ETB',
      'symbol' => 'Br',
      'name' => t('Ethiopian Birr'),
      'numeric_code' => '230',
      'minor_unit' => t('Santim'),
      'major_unit' => t('Birr'),
    ),
    'EUR' => array(
      'code' => 'EUR',
      'symbol' => '€',
      'name' => t('Euro'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'numeric_code' => '978',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Euro'),
    ),
    'FJD' => array(
      'code' => 'FJD',
      'symbol' => 'FJ$',
      'name' => t('Fijian Dollar'),
      'numeric_code' => '242',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'FKP' => array(
      'code' => 'FKP',
      'symbol' => 'FK£',
      'name' => t('Falkland Islands Pound'),
      'numeric_code' => '238',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'GBP' => array(
      'code' => 'GBP',
      'symbol' => '£',
      'name' => t('British Pound Sterling'),
      'numeric_code' => '826',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'GHS' => array(
      'code' => 'GHS',
      'symbol' => 'GH₵',
      'name' => t('Ghanaian Cedi'),
      'minor_unit' => t('Pesewa'),
      'major_unit' => t('Cedi'),
    ),
    'GIP' => array(
      'code' => 'GIP',
      'symbol' => 'GI£',
      'name' => t('Gibraltar Pound'),
      'numeric_code' => '292',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'GMD' => array(
      'code' => 'GMD',
      'symbol' => 'GMD',
      'name' => t('Gambian Dalasi'),
      'numeric_code' => '270',
      'minor_unit' => t('Butut'),
      'major_unit' => t('Dalasis'),
    ),
    'GNF' => array(
      'code' => 'GNF',
      'symbol' => 'FG',
      'name' => t('Guinean Franc'),
      'decimals' => 0,
      'numeric_code' => '324',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'GTQ' => array(
      'code' => 'GTQ',
      'symbol' => 'GTQ',
      'name' => t('Guatemalan Quetzal'),
      'numeric_code' => '320',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Quetzales'),
    ),
    'GYD' => array(
      'code' => 'GYD',
      'symbol' => 'GY$',
      'name' => t('Guyanaese Dollar'),
      'decimals' => 0,
      'numeric_code' => '328',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'HKD' => array(
      'code' => 'HKD',
      'symbol' => 'HK$',
      'name' => t('Hong Kong Dollar'),
      'numeric_code' => '344',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'HNL' => array(
      'code' => 'HNL',
      'symbol' => 'HNL',
      'name' => t('Honduran Lempira'),
      'numeric_code' => '340',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Lempiras'),
    ),
    'HRK' => array(
      'code' => 'HRK',
      'symbol' => 'kn',
      'name' => t('Croatian Kuna'),
      'numeric_code' => '191',
      'minor_unit' => t('Lipa'),
      'major_unit' => t('Kuna'),
    ),
    'HTG' => array(
      'code' => 'HTG',
      'symbol' => 'HTG',
      'name' => t('Haitian Gourde'),
      'numeric_code' => '332',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Gourde'),
    ),
    'HUF' => array(
      'code' => 'HUF',
      'symbol' => 'Ft',
      'name' => t('Hungarian Forint'),
      'numeric_code' => '348',
      'decimal_separator' => ',',
      'thousands_separator' => ' ',
      'decimals' => 0,
      'symbol_placement' => 'after',
      'code_placement' => '',
      'major_unit' => t('Forint'),
    ),
    'IDR' => array(
      'code' => 'IDR',
      'symbol' => 'Rp',
      'name' => t('Indonesian Rupiah'),
      'decimals' => 0,
      'numeric_code' => '360',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Rupiahs'),
    ),
    'ILS' => array(
      'code' => 'ILS',
      'symbol' => '₪',
      'name' => t('Israeli New Shekel'),
      'numeric_code' => '376',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Agora'),
      'major_unit' => t('New Shekels'),
    ),
    'INR' => array(
      'code' => 'INR',
      'symbol' => 'Rs',
      'name' => t('Indian Rupee'),
      'numeric_code' => '356',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Rupee'),
    ),
    'IRR' => array(
      'code' => 'IRR',
      'symbol' => '﷼',
      'name' => t('Iranian Rial'),
      'numeric_code' => '364',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Rial'),
      'major_unit' => t('Toman'),
    ),
    'ISK' => array(
      'code' => 'ISK',
      'symbol' => 'Ikr',
      'name' => t('Icelandic Króna'),
      'decimals' => 0,
      'thousands_separator' => ' ',
      'numeric_code' => '352',
      'minor_unit' => t('Eyrir'),
      'major_unit' => t('Kronur'),
    ),
    'JMD' => array(
      'code' => 'JMD',
      'symbol' => 'J$',
      'name' => t('Jamaican Dollar'),
      'numeric_code' => '388',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'JOD' => array(
      'code' => 'JOD',
      'symbol' => 'JD',
      'name' => t('Jordanian Dinar'),
      'decimals' => 3,
      'numeric_code' => '400',
      'minor_unit' => t('Piastr'),
      'major_unit' => t('Dinar'),
    ),
    'JPY' => array(
      'code' => 'JPY',
      'symbol' => '¥',
      'name' => t('Japanese Yen'),
      'decimals' => 0,
      'numeric_code' => '392',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Yen'),
    ),
    'KES' => array(
      'code' => 'KES',
      'symbol' => 'Ksh',
      'name' => t('Kenyan Shilling'),
      'numeric_code' => '404',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Shilling'),
    ),
    'KGS' => array(
      'code' => 'KGS',
      'code_placement' => '',
      'symbol' => 'сом',
      'symbol_placement' => 'after',
      'name' => t('Kyrgyzstani Som'),
      'numeric_code' => '417',
      'thousands_separator' => '',
      'major_unit' => t('Som'),
      'minor_unit' => t('Tyiyn'),
    ),
    'KMF' => array(
      'code' => 'KMF',
      'symbol' => 'CF',
      'name' => t('Comorian Franc'),
      'decimals' => 0,
      'numeric_code' => '174',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'KRW' => array(
      'code' => 'KRW',
      'symbol' => '₩',
      'name' => t('South Korean Won'),
      'decimals' => 0,
      'numeric_code' => '410',
      'minor_unit' => t('Jeon'),
      'major_unit' => t('Won'),
    ),
    'KWD' => array(
      'code' => 'KWD',
      'symbol' => 'KD',
      'name' => t('Kuwaiti Dinar'),
      'decimals' => 3,
      'numeric_code' => '414',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Dinar'),
    ),
    'KYD' => array(
      'code' => 'KYD',
      'symbol' => 'KY$',
      'name' => t('Cayman Islands Dollar'),
      'numeric_code' => '136',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'KZT' => array(
      'code' => 'KZT',
      'symbol' => 'тг.',
      'name' => t('Kazakhstani tenge'),
      'numeric_code' => '398',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Tiyn'),
      'major_unit' => t('Tenge'),
    ),
    'LAK' => array(
      'code' => 'LAK',
      'symbol' => '₭N',
      'name' => t('Laotian Kip'),
      'decimals' => 0,
      'numeric_code' => '418',
      'minor_unit' => t('Att'),
      'major_unit' => t('Kips'),
    ),
    'LBP' => array(
      'code' => 'LBP',
      'symbol' => 'LB£',
      'name' => t('Lebanese Pound'),
      'decimals' => 0,
      'numeric_code' => '422',
      'minor_unit' => t('Piastre'),
      'major_unit' => t('Pound'),
    ),
    'LKR' => array(
      'code' => 'LKR',
      'symbol' => 'SLRs',
      'name' => t('Sri Lanka Rupee'),
      'numeric_code' => '144',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rupee'),
    ),
    'LRD' => array(
      'code' => 'LRD',
      'symbol' => 'L$',
      'name' => t('Liberian Dollar'),
      'numeric_code' => '430',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'LSL' => array(
      'code' => 'LSL',
      'symbol' => 'LSL',
      'name' => t('Lesotho Loti'),
      'numeric_code' => '426',
      'minor_unit' => t('Sente'),
      'major_unit' => t('Loti'),
    ),
    'LTL' => array(
      'code' => 'LTL',
      'symbol' => 'Lt',
      'name' => t('Lithuanian Litas'),
      'numeric_code' => '440',
      'minor_unit' => t('Centas'),
      'major_unit' => t('Litai'),
    ),
    'LVL' => array(
      'code' => 'LVL',
      'symbol' => 'Ls',
      'name' => t('Latvian Lats'),
      'numeric_code' => '428',
      'minor_unit' => t('Santims'),
      'major_unit' => t('Lati'),
    ),
    'LYD' => array(
      'code' => 'LYD',
      'symbol' => 'LD',
      'name' => t('Libyan Dinar'),
      'decimals' => 3,
      'numeric_code' => '434',
      'minor_unit' => t('Dirham'),
      'major_unit' => t('Dinar'),
    ),
    'MAD' => array(
      'code' => 'MAD',
      'symbol' => ' Dhs',
      'name' => t('Moroccan Dirham'),
      'numeric_code' => '504',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Santimat'),
      'major_unit' => t('Dirhams'),
    ),
    'MDL' => array(
      'code' => 'MDL',
      'symbol' => 'MDL',
      'name' => t('Moldovan leu'),
      'symbol_placement' => 'after',
      'numeric_code' => '498',
      'code_placement' => '',
      'minor_unit' => t('bani'),
      'major_unit' => t('Lei'),
    ),
    'MMK' => array(
      'code' => 'MMK',
      'symbol' => 'MMK',
      'name' => t('Myanma Kyat'),
      'decimals' => 0,
      'numeric_code' => '104',
      'minor_unit' => t('Pya'),
      'major_unit' => t('Kyat'),
    ),
    'MNT' => array(
      'code' => 'MNT',
      'symbol' => '₮',
      'name' => t('Mongolian Tugrik'),
      'decimals' => 0,
      'numeric_code' => '496',
      'minor_unit' => t('Möngö'),
      'major_unit' => t('Tugriks'),
    ),
    'MOP' => array(
      'code' => 'MOP',
      'symbol' => 'MOP$',
      'name' => t('Macanese Pataca'),
      'numeric_code' => '446',
      'minor_unit' => t('Avo'),
      'major_unit' => t('Pataca'),
    ),
    'MRO' => array(
      'code' => 'MRO',
      'symbol' => 'UM',
      'name' => t('Mauritanian Ouguiya'),
      'decimals' => 0,
      'numeric_code' => '478',
      'minor_unit' => t('Khoums'),
      'major_unit' => t('Ouguiya'),
    ),
    'MTP' => array(
      'code' => 'MTP',
      'symbol' => 'MT£',
      'name' => t('Maltese Pound'),
      'minor_unit' => t('Shilling'),
      'major_unit' => t('Pound'),
    ),
    'MUR' => array(
      'code' => 'MUR',
      'symbol' => 'MURs',
      'name' => t('Mauritian Rupee'),
      'decimals' => 0,
      'numeric_code' => '480',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rupee'),
    ),
    'MXN' => array(
      'code' => 'MXN',
      'symbol' => '$',
      'name' => t('Mexican Peso'),
      'numeric_code' => '484',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'MYR' => array(
      'code' => 'MYR',
      'symbol' => 'RM',
      'name' => t('Malaysian Ringgit'),
      'numeric_code' => '458',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Sen'),
      'major_unit' => t('Ringgits'),
    ),
    'MZN' => array(
      'code' => 'MZN',
      'symbol' => 'MTn',
      'name' => t('Mozambican Metical'),
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Metical'),
    ),
    'NAD' => array(
      'code' => 'NAD',
      'symbol' => 'N$',
      'name' => t('Namibian Dollar'),
      'numeric_code' => '516',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'NGN' => array(
      'code' => 'NGN',
      'symbol' => '₦',
      'name' => t('Nigerian Naira'),
      'numeric_code' => '566',
      'minor_unit' => t('Kobo'),
      'major_unit' => t('Naira'),
    ),
    'NIO' => array(
      'code' => 'NIO',
      'symbol' => 'C$',
      'name' => t('Nicaraguan Cordoba Oro'),
      'numeric_code' => '558',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Cordoba'),
    ),
    'NOK' => array(
      'code' => 'NOK',
      'symbol' => 'Nkr',
      'name' => t('Norwegian Krone'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'numeric_code' => '578',
      'minor_unit' => t('Øre'),
      'major_unit' => t('Krone'),
    ),
    'NPR' => array(
      'code' => 'NPR',
      'symbol' => 'NPRs',
      'name' => t('Nepalese Rupee'),
      'numeric_code' => '524',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Rupee'),
    ),
    'NZD' => array(
      'code' => 'NZD',
      'symbol' => 'NZ$',
      'name' => t('New Zealand Dollar'),
      'numeric_code' => '554',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'PAB' => array(
      'code' => 'PAB',
      'symbol' => 'B/.',
      'name' => t('Panamanian Balboa'),
      'numeric_code' => '590',
      'minor_unit' => t('Centésimo'),
      'major_unit' => t('Balboa'),
    ),
    'PEN' => array(
      'code' => 'PEN',
      'symbol' => 'S/.',
      'name' => t('Peruvian Nuevo Sol'),
      'numeric_code' => '604',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Nuevos Sole'),
    ),
    'PGK' => array(
      'code' => 'PGK',
      'symbol' => 'PGK',
      'name' => t('Papua New Guinean Kina'),
      'numeric_code' => '598',
      'minor_unit' => t('Toea'),
      'major_unit' => t('Kina '),
    ),
    'PHP' => array(
      'code' => 'PHP',
      'symbol' => '₱',
      'name' => t('Philippine Peso'),
      'numeric_code' => '608',
      'minor_unit' => t('Centavo'),
      'major_unit' => t('Peso'),
    ),
    'PKR' => array(
      'code' => 'PKR',
      'symbol' => 'PKRs',
      'name' => t('Pakistani Rupee'),
      'decimals' => 0,
      'numeric_code' => '586',
      'minor_unit' => t('Paisa'),
      'major_unit' => t('Rupee'),
    ),
    'PLN' => array(
      'code' => 'PLN',
      'symbol' => 'zł',
      'name' => t('Polish Złoty'),
      'decimal_separator' => ',',
      'thousands_separator' => ' ',
      'numeric_code' => '985',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Grosz'),
      'major_unit' => t('Złotych'),
    ),
    'PYG' => array(
      'code' => 'PYG',
      'symbol' => '₲',
      'name' => t('Paraguayan Guarani'),
      'decimals' => 0,
      'numeric_code' => '600',
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Guarani'),
    ),
    'QAR' => array(
      'code' => 'QAR',
      'symbol' => 'QR',
      'name' => t('Qatari Rial'),
      'numeric_code' => '634',
      'minor_unit' => t('Dirham'),
      'major_unit' => t('Rial'),
    ),
    'RHD' => array(
      'code' => 'RHD',
      'symbol' => 'RH$',
      'name' => t('Rhodesian Dollar'),
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'RON' => array(
      'code' => 'RON',
      'symbol' => 'RON',
      'name' => t('Romanian Leu'),
      'minor_unit' => t('Ban'),
      'major_unit' => t('Leu'),
    ),
    'RSD' => array(
      'code' => 'RSD',
      'symbol' => 'din.',
      'name' => t('Serbian Dinar'),
      'decimals' => 0,
      'minor_unit' => t('Para'),
      'major_unit' => t('Dinars'),
    ),
    'RUB' => array(
      'code' => 'RUB',
      'symbol' => 'руб.',
      'name' => t('Russian Ruble'),
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'numeric_code' => '643',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Kopek'),
      'major_unit' => t('Ruble'),
    ),
    'SAR' => array(
      'code' => 'SAR',
      'symbol' => 'SR',
      'name' => t('Saudi Riyal'),
      'numeric_code' => '682',
      'minor_unit' => t('Hallallah'),
      'major_unit' => t('Riyals'),
    ),
    'SBD' => array(
      'code' => 'SBD',
      'symbol' => 'SI$',
      'name' => t('Solomon Islands Dollar'),
      'numeric_code' => '090',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'SCR' => array(
      'code' => 'SCR',
      'symbol' => 'SRe',
      'name' => t('Seychellois Rupee'),
      'numeric_code' => '690',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rupee'),
    ),
    'SDD' => array(
      'code' => 'SDD',
      'symbol' => 'LSd',
      'name' => t('Old Sudanese Dinar'),
      'numeric_code' => '736',
      'minor_unit' => t('None'),
      'major_unit' => t('Dinar'),
    ),
    'SEK' => array(
      'code' => 'SEK',
      'symbol' => 'kr',
      'name' => t('Swedish Krona'),
      'numeric_code' => '752',
      'thousands_separator' => ' ',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Öre'),
      'major_unit' => t('Kronor'),
    ),
    'SGD' => array(
      'code' => 'SGD',
      'symbol' => 'S$',
      'name' => t('Singapore Dollar'),
      'numeric_code' => '702',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'SHP' => array(
      'code' => 'SHP',
      'symbol' => 'SH£',
      'name' => t('Saint Helena Pound'),
      'numeric_code' => '654',
      'minor_unit' => t('Penny'),
      'major_unit' => t('Pound'),
    ),
    'SLL' => array(
      'code' => 'SLL',
      'symbol' => 'Le',
      'name' => t('Sierra Leonean Leone'),
      'decimals' => 0,
      'numeric_code' => '694',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Leone'),
    ),
    'SOS' => array(
      'code' => 'SOS',
      'symbol' => 'Ssh',
      'name' => t('Somali Shilling'),
      'decimals' => 0,
      'numeric_code' => '706',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Shilling'),
    ),
    'SRD' => array(
      'code' => 'SRD',
      'symbol' => 'SR$',
      'name' => t('Surinamese Dollar'),
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'SRG' => array(
      'code' => 'SRG',
      'symbol' => 'Sf',
      'name' => t('Suriname Guilder'),
      'numeric_code' => '740',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Guilder'),
    ),
    'STD' => array(
      'code' => 'STD',
      'symbol' => 'Db',
      'name' => t('São Tomé and Príncipe Dobra'),
      'decimals' => 0,
      'numeric_code' => '678',
      'minor_unit' => t('Cêntimo'),
      'major_unit' => t('Dobra'),
    ),
    'SYP' => array(
      'code' => 'SYP',
      'symbol' => 'SY£',
      'name' => t('Syrian Pound'),
      'decimals' => 0,
      'numeric_code' => '760',
      'minor_unit' => t('Piastre'),
      'major_unit' => t('Pound'),
    ),
    'SZL' => array(
      'code' => 'SZL',
      'symbol' => 'SZL',
      'name' => t('Swazi Lilangeni'),
      'numeric_code' => '748',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Lilangeni'),
    ),
    'THB' => array(
      'code' => 'THB',
      'symbol' => '฿',
      'name' => t('Thai Baht'),
      'numeric_code' => '764',
      'minor_unit' => t('Satang'),
      'major_unit' => t('Baht'),
    ),
    'TND' => array(
      'code' => 'TND',
      'symbol' => 'DT',
      'name' => t('Tunisian Dinar'),
      'decimals' => 3,
      'numeric_code' => '788',
      'minor_unit' => t('Millime'),
      'major_unit' => t('Dinar'),
    ),
    'TOP' => array(
      'code' => 'TOP',
      'symbol' => 'T$',
      'name' => t('Tongan Paʻanga'),
      'numeric_code' => '776',
      'minor_unit' => t('Senit'),
      'major_unit' => t('Paʻanga'),
    ),
    'TRY' => array(
      'code' => 'TRY',
      'symbol' => 'TL',
      'name' => t('Turkish Lira'),
      'numeric_code' => '949',
      'thousands_separator' => '.',
      'decimal_separator' => ',',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Kurus'),
      'major_unit' => t('Lira'),
    ),
    'TTD' => array(
      'code' => 'TTD',
      'symbol' => 'TT$',
      'name' => t('Trinidad and Tobago Dollar'),
      'numeric_code' => '780',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'TWD' => array(
      'code' => 'TWD',
      'symbol' => 'NT$',
      'name' => t('New Taiwan Dollar'),
      'numeric_code' => '901',
      'minor_unit' => t('Cent'),
      'major_unit' => t('New Dollar'),
    ),
    'TZS' => array(
      'code' => 'TZS',
      'symbol' => 'TSh',
      'name' => t('Tanzanian Shilling'),
      'decimals' => 0,
      'numeric_code' => '834',
      'minor_unit' => t('Senti'),
      'major_unit' => t('Shilling'),
    ),
    'UAH' => array(
      'code' => 'UAH',
      'symbol' => 'грн.',
      'name' => t('Ukrainian Hryvnia'),
      'numeric_code' => '980',
      'thousands_separator' => '',
      'decimal_separator' => '.',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('Kopiyka'),
      'major_unit' => t('Hryvnia'),
    ),
    'UGX' => array(
      'code' => 'UGX',
      'symbol' => 'USh',
      'name' => t('Ugandan Shilling'),
      'decimals' => 0,
      'numeric_code' => '800',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Shilling'),
    ),
    'USD' => array(
      'code' => 'USD',
      'symbol' => '$',
      'name' => t('United States Dollar'),
      'numeric_code' => '840',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'UYU' => array(
      'code' => 'UYU',
      'symbol' => '$U',
      'name' => t('Uruguayan Peso'),
      'numeric_code' => '858',
      'minor_unit' => t('Centésimo'),
      'major_unit' => t('Peso'),
    ),
    'VEF' => array(
      'code' => 'VEF',
      'symbol' => 'Bs.F.',
      'name' => t('Venezuelan Bolívar Fuerte'),
      'minor_unit' => t('Céntimo'),
      'major_unit' => t('Bolivares Fuerte'),
    ),
    'VND' => array(
      'code' => 'VND',
      'symbol' => 'đ',
      'name' => t('Vietnamese Dong'),
      'decimals' => 0,
      'thousands_separator' => '.',
      'symbol_placement' => 'after',
      'symbol_spacer' => '',
      'code_placement' => '',
      'numeric_code' => '704',
      'minor_unit' => t('Hà'),
      'major_unit' => t('Dong'),
    ),
    'VUV' => array(
      'code' => 'VUV',
      'symbol' => 'VT',
      'name' => t('Vanuatu Vatu'),
      'decimals' => 0,
      'numeric_code' => '548',
      'major_unit' => t('Vatu'),
    ),
    'WST' => array(
      'code' => 'WST',
      'symbol' => 'WS$',
      'name' => t('Samoan Tala'),
      'numeric_code' => '882',
      'minor_unit' => t('Sene'),
      'major_unit' => t('Tala'),
    ),
    'XAF' => array(
      'code' => 'XAF',
      'symbol' => 'FCFA',
      'name' => t('CFA Franc BEAC'),
      'decimals' => 0,
      'numeric_code' => '950',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'XCD' => array(
      'code' => 'XCD',
      'symbol' => 'EC$',
      'name' => t('East Caribbean Dollar'),
      'numeric_code' => '951',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Dollar'),
    ),
    'XOF' => array(
      'code' => 'XOF',
      'symbol' => 'CFA',
      'name' => t('CFA Franc BCEAO'),
      'decimals' => 0,
      'numeric_code' => '952',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'XPF' => array(
      'code' => 'XPF',
      'symbol' => 'CFPF',
      'name' => t('CFP Franc'),
      'decimals' => 0,
      'numeric_code' => '953',
      'minor_unit' => t('Centime'),
      'major_unit' => t('Franc'),
    ),
    'YER' => array(
      'code' => 'YER',
      'symbol' => 'YR',
      'name' => t('Yemeni Rial'),
      'decimals' => 0,
      'numeric_code' => '886',
      'minor_unit' => t('Fils'),
      'major_unit' => t('Rial'),
    ),
    'ZAR' => array(
      'code' => 'ZAR',
      'symbol' => 'R',
      'name' => t('South African Rand'),
      'numeric_code' => '710',
      'symbol_placement' => 'before',
      'code_placement' => '',
      'minor_unit' => t('Cent'),
      'major_unit' => t('Rand'),
    ),
    'ZMK' => array(
      'code' => 'ZMK',
      'symbol' => 'ZK',
      'name' => t('Zambian Kwacha'),
      'decimals' => 0,
      'numeric_code' => '894',
      'minor_unit' => t('Ngwee'),
      'major_unit' => t('Kwacha'),
    ),
  );
}
